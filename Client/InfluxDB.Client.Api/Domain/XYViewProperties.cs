/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// XYViewProperties
    /// </summary>
    [DataContract]
    public partial class XYViewProperties : ViewProperties,  IEquatable<XYViewProperties>
    {
        /// <summary>
        /// Defines Shape
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShapeEnum
        {
            /// <summary>
            /// Enum ChronografV2 for value: chronograf-v2
            /// </summary>
            [EnumMember(Value = "chronograf-v2")]
            ChronografV2 = 1

        }

        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [DataMember(Name="shape", EmitDefaultValue=false)]
        public ShapeEnum? Shape { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Xy for value: xy
            /// </summary>
            [EnumMember(Value = "xy")]
            Xy = 1

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Defines Geom
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GeomEnum
        {
            /// <summary>
            /// Enum Line for value: line
            /// </summary>
            [EnumMember(Value = "line")]
            Line = 1,

            /// <summary>
            /// Enum Step for value: step
            /// </summary>
            [EnumMember(Value = "step")]
            Step = 2,

            /// <summary>
            /// Enum Stacked for value: stacked
            /// </summary>
            [EnumMember(Value = "stacked")]
            Stacked = 3,

            /// <summary>
            /// Enum Bar for value: bar
            /// </summary>
            [EnumMember(Value = "bar")]
            Bar = 4

        }

        /// <summary>
        /// Gets or Sets Geom
        /// </summary>
        [DataMember(Name="geom", EmitDefaultValue=false)]
        public GeomEnum? Geom { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="XYViewProperties" /> class.
        /// </summary>
        /// <param name="axes">axes.</param>
        /// <param name="shape">shape.</param>
        /// <param name="type">type.</param>
        /// <param name="legend">legend.</param>
        /// <param name="geom">geom.</param>
        public XYViewProperties(Axes axes = default(Axes), ShapeEnum? shape = default(ShapeEnum?), TypeEnum? type = default(TypeEnum?), Legend legend = default(Legend), GeomEnum? geom = default(GeomEnum?), List<DashboardQuery> queries = default(List<DashboardQuery>), List<DashboardColor> colors = default(List<DashboardColor>), string note = default(string), bool? showNoteWhenEmpty = default(bool?)) : base(queries, colors, note, showNoteWhenEmpty)
        {
            this.Axes = axes;
            this.Shape = shape;
            this.Type = type;
            this.Legend = legend;
            this.Geom = geom;
        }

        /// <summary>
        /// Gets or Sets Axes
        /// </summary>
        [DataMember(Name="axes", EmitDefaultValue=false)]
        public Axes Axes { get; set; }



        /// <summary>
        /// Gets or Sets Legend
        /// </summary>
        [DataMember(Name="legend", EmitDefaultValue=false)]
        public Legend Legend { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XYViewProperties {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Axes: ").Append(Axes).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Legend: ").Append(Legend).Append("\n");
            sb.Append("  Geom: ").Append(Geom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XYViewProperties);
        }

        /// <summary>
        /// Returns true if XYViewProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of XYViewProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XYViewProperties input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    
                    (this.Axes != null &&
                    this.Axes.Equals(input.Axes))
                ) && base.Equals(input) && 
                (
                    this.Shape == input.Shape ||
                    (this.Shape != null &&
                    this.Shape.Equals(input.Shape))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    
                    (this.Legend != null &&
                    this.Legend.Equals(input.Legend))
                ) && base.Equals(input) && 
                (
                    this.Geom == input.Geom ||
                    (this.Geom != null &&
                    this.Geom.Equals(input.Geom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Axes != null)
                    hashCode = hashCode * 59 + this.Axes.GetHashCode();
                if (this.Shape != null)
                    hashCode = hashCode * 59 + this.Shape.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Legend != null)
                    hashCode = hashCode * 59 + this.Legend.GetHashCode();
                if (this.Geom != null)
                    hashCode = hashCode * 59 + this.Geom.GetHashCode();
                return hashCode;
            }
        }

    }

}

/* 
 * Influx API Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = InfluxDB.Client.Api.Client.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// PagerDutyNotificationEndpoint
    /// </summary>
    [DataContract]
    public partial class PagerDutyNotificationEndpoint : NotificationEndpoint,  IEquatable<PagerDutyNotificationEndpoint>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PagerDutyNotificationEndpoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PagerDutyNotificationEndpoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PagerDutyNotificationEndpoint" /> class.
        /// </summary>
        /// <param name="url">url (required).</param>
        /// <param name="routingKey">routingKey (required).</param>
        public PagerDutyNotificationEndpoint(string url = default(string), string routingKey = default(string), string id = default(string), string orgID = default(string), string userID = default(string), string description = default(string), string name = default(string), StatusEnum? status = StatusEnum.Active, List<Label> labels = default(List<Label>), NotificationEndpointType type = default(NotificationEndpointType)) : base(id, orgID, userID, description, name, status, labels, type)
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for PagerDutyNotificationEndpoint and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            // to ensure "routingKey" is required (not null)
            if (routingKey == null)
            {
                throw new InvalidDataException("routingKey is a required property for PagerDutyNotificationEndpoint and cannot be null");
            }
            else
            {
                this.RoutingKey = routingKey;
            }
        }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets RoutingKey
        /// </summary>
        [DataMember(Name="routingKey", EmitDefaultValue=false)]
        public string RoutingKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PagerDutyNotificationEndpoint {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  RoutingKey: ").Append(RoutingKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PagerDutyNotificationEndpoint);
        }

        /// <summary>
        /// Returns true if PagerDutyNotificationEndpoint instances are equal
        /// </summary>
        /// <param name="input">Instance of PagerDutyNotificationEndpoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PagerDutyNotificationEndpoint input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && base.Equals(input) && 
                (
                    this.RoutingKey == input.RoutingKey ||
                    (this.RoutingKey != null &&
                    this.RoutingKey.Equals(input.RoutingKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.RoutingKey != null)
                    hashCode = hashCode * 59 + this.RoutingKey.GetHashCode();
                return hashCode;
            }
        }

    }

}
